一、认识数据类型
1、python数据类型：数值{ int（整型）、float(浮点型)}，布尔型{ Ture(真)、false(假)}，str(字符串)，list(列表)，tuple(元组)，set(集合)。
     通过type函数可以查看这些类型并打印出来：print(type(变量名))。
二、输出
1、格式化输出 print("%d"%变量名)；多个变量的输出 print("%d%s"%(变量名1，变量名2))；变量之间用逗号隔开；整型变量还可以做加法运算。
2、格式化高级使用：tips:	
	(1):%06d,表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出。
	(2):%.2f，表示小数点后显示的小数位数。
3、强大的%s:  理论上%d,%f,%s类型的变量都可以用%s进行格式化输出。
4、格式化字符串除了%s,还可以写为f "表达式"；例如：print(f"我的名字是{变量1},今年{变量2}岁了")。 	
5、转义字符：
	\n:换行。
	\t:制表符，一个tab键(四个空格)的距离。
6、结束符，print("输出的内容"，end="\n")
	在python中，print(),默认自带换行结束符，所以导致每两个print直接会换行展示，用户可以按要求更该结束符。
	例如：print("",end="\t")、print("",end="...")。
三、输入
3.1：
     1、输入的语法：input("提示信息")。
     2、输入的特点：input接收到的数据类型都是字符串。
3.2：转换数据类型
      1、int(x)、float(x)、str(x)分别将x转化为整数，浮点数，字符串。
      2、eval(str)用来计算在字符串中的有效python表达式，并返回一个对象。
	str1='1'
	str2='1.1'
	str3='(10,20,30)'
	str4='[10,20,30]'
	通过eval(str)能够将相应的字符串转化为整数，浮点数，元组，列表。
      3、tuple(s)、list(s)分别将序列s转化为元组、列表 。
3.3：pycharm交互式开发 python console
四、运算符
 （算数运算符、赋值运算符、复合赋值运算符、比较运算符、逻辑运算符）
1、算数运算符：//(整除)、**(指数) 例如2**4=16。
2、赋值运算符：多个变量赋值：
	          num1, float1, str1 = 10, 0.5, 'hello world'
	          多变量赋相同值：
	           a=b=10
3、复合赋值运算符：+=、-=、*=、/=、//=、%=、**=.
4、关系运算符：==、!=、>，<，>=，<=.
5、逻辑运算符：and、or、not(与、或、非)
      5.1 拓展 数字之间的逻辑运算。
            and运算符，只要有一个值为0，则结果为0，否则结果最后一个非0数字。
            or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字。
四、if语法
1、语法：
              if 条件：
	    表达式1...
	    表达式2...
              else:
2、多重选择判断：if:		elif:	else:  
2.1、导出random模块
       import random
       使用random模块中的随机整数功能
       random.randint(开始，结束) 
五、三目运算符(也叫三元运算符或三元表达式)
1、条件成立执行的表达式   if   条件   else   条件不成立执行的表达式。
六、循环
1、while 条件：
	表达式1：
	表达式2：
	注：当while与continue一起用的时候，记得在if语句后面对计数变量进行累加，否则就是死循环。
2、for循环
for 临时变量 in 序列：
	表达式1：
	表达式2：
3、while...else
               	3.1、语法
	while 条件：
		条件成立重复执行的代码
	else:
		循环正常结束之后要执行的代码
4、for...else(同上)
七、字符串
1、'''  '''括起来的内容可以写多行，并且多行输出；'  '只能输出一行。
2、索引：2.1、类似于字符串数组，直接访问字符串中的某一个字符。#str[0],str[1].
3、切片：得到部分字符串
	3.1、语法：序列[开始位置下标 : 结束位置下标 : 步长]。
	3.2、步长是选取间隔，正负整数均可，默认步长为1。
	3.3、不包含结束位置下标对应的数据，正负整数均可。
	3.4、开始位置不写默认为0，结束位置不写默认到最后。
	3.5、步长为负数表示倒序输出。注:（要保证 下标开始到结束的方向 和 步长的方向 一致，否则无法选取数据）
4、常用操作方法
	4.1、查找
	  所谓字符串查找方法即是查找子串在字符串中的位置或出现次数。
	  4.1.1、 find():检测某个字串是否包含在这个字符串中，如果在返回这个字串开始的位置下标，否则则返回-1。
	  （1）语法：字符串序列 . find(字串，开始位置下标，结束位置下标)
		注：开始和结束位置下标可以省略，表示在整个字符串序列中查找。
	  4.1.2、index():检测某个字串是否在这个字符串中，如果在返回这个字串开始的位置下标，否则则报异常。			
	  4.1.3、count()：检测某个字串出现的次数，返回整数，若没有则返回0
		rfind()、rindex()从右侧开始查找。
	4.2、修改
	  所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。
	  4.2.1、replace():替换
	  （1）语法： 字符串序列.replace(旧子串，新子串，替换次数)，该函数不会修改原字符串，因此需要变量去接受新的字符串
		注：替换次数如果查出字串出现次数，则替换次数为该字串出现次数。
	  4.2.2、split(): 按照指定字符分割字符串。
	  （1）语法：字符串序列.split(分割字符，num)
		注：num表示的是分割字符出现的次数，即将来返回数据个数为num+1个。如果分割字符是原有字符串中的子串，分割后则丢失该子串。
	  4.2.3、join():用一个“字符或子串”合并字符串，即是将多个字符串合并为一个新的字符串。
	  （1）语法：“字符或子串”. join(多字符串组成的序列)
		例：list=['aa','bb','cc']
		       new_list='...'.join(list),链接的字符可以任意修改
		则new_list输出的结果就是'aa...bb...cc'
	  4.2.4、capitalize():将字符串第一个字符转换成大写。且经过该函数操作后所有的后面的大写都会变成小写。
	  4.2.5、title():将字符串每个单词首字母转换成大写。
	  4.2.6、lower():将字符串中大写转小写。
	  4.2.7、upper():将字符串中小写转大写。
	  4.2.8、lstrip():删除字符串左侧空白字符。
	  4.2.9、rstrip():删除字符串右侧空白字符。
	  4.2.10、strip():删除字符串两侧空白字符。
	  4.2.11、ljust():返回一个原字符串左对齐，并使用指定字符（默认空格）填充至对应长度的新字符串。
		（1）语法：
			字符串序列.ljust(长度，填充字符)。例如：
			mystr = "hello"
			mystr.ljust(10,".")
			'hello.....'(输出结果)
		（2）rjust():返回一个原字符串右对齐，并使用指定字符（默认空格）填充至对应长度的新字符串，语法和ljust()相同。
		（3）center():返回一个原字符串居中对齐，并使用指定字符（默认空格）填充至对应长度的新字符串，语法和ljust相同。
	4.3、判断
	  所谓判断即是判断真假，返回的结果是布尔型数据类型：True或False。
	  4.3.1、startwith():检查字符串是否是以指定子串开头，是则返回True,否则返回False。如果设置开始和结束位置下标，则在指定范围内检查。	
	  （1）语法：字符串序列.startswith(子串，开始位置下标，结束位置下标)。
	  4.3.2、endswith():类比startswith()。
	  4.3.3、isalpha():如果字符串所有字符都是字母则返回Ture，否则返回False。
	  4.3.4、isdigit():如果字符串只包含数字则返回Ture，否则返回False。
	  4.3.5、isalnum():如果只有数字和字母组合而成则返回True，否则返回False。
	  4.3.6、isspace()如果只有空白字符则返回True,否则返回False。






	
	



